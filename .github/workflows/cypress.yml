name: Cypress Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
  schedule:
    - cron: '0 7,13,22 * * *'

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate required secrets
      run: |
        if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          echo "Error: SLACK_WEBHOOK_URL secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.CYPRESS_APP_URL }}" ]; then
          echo "Error: CYPRESS_APP_URL secret is not set"
          exit 1
        fi
        echo "‚úÖ Required secrets are configured"

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install

    - name: Run Cypress tests
      id: cypress
      uses: cypress-io/github-action@v5
      with:
        browser: chrome
        config-file: cypress.config.js
        publish-summary: true
        reporter: 'mocha-junit-reporter'
        reporter-options: >
          mochaFile=cypress/reports/junit-[hash].xml,
          toConsole=true,
          output=cypress/reports/cypress-run-output.txt,
          testsuitesTitle=false
      env:
        CYPRESS_APP_URL: ${{ secrets.CYPRESS_APP_URL }}
      continue-on-error: true

    - name: Process test results
      id: test-results
      if: always()
      run: |
        # First try the results.json file (most reliable)
        if [ -f "cypress/reports/results.json" ]; then
          echo "Processing results from results.json"
          
          # Install jq if needed
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            apt-get update && apt-get install -y jq
          fi
          
          # Extract test counts
          TOTAL=$(jq -r '.totalTests' cypress/reports/results.json)
          PASSING=$(jq -r '.totalPassed' cypress/reports/results.json)
          FAILING=$(jq -r '.totalFailed' cypress/reports/results.json)
          
          echo "Test Results Summary:"
          echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
          echo "‚îÇ Total Tests: $TOTAL"
          echo "‚îÇ Passing: $PASSING"
          echo "‚îÇ Failing: $FAILING"
          echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
          
          # Set environment variables and outputs
          echo "TOTAL_TESTS=$TOTAL" >> $GITHUB_ENV
          echo "PASSING_TESTS=$PASSING" >> $GITHUB_ENV
          echo "FAILING_TESTS=$FAILING" >> $GITHUB_ENV
          
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passing=$PASSING" >> $GITHUB_OUTPUT
          echo "failing=$FAILING" >> $GITHUB_OUTPUT
        else
          echo "No results.json found"
          echo "Available files:"
          find cypress/reports -type f | sort
          
          # Default values if no results found
          echo "TOTAL_TESTS=0" >> $GITHUB_ENV
          echo "PASSING_TESTS=0" >> $GITHUB_ENV
          echo "FAILING_TESTS=0" >> $GITHUB_ENV
          
          echo "total=0" >> $GITHUB_OUTPUT
          echo "passing=0" >> $GITHUB_OUTPUT
          echo "failing=0" >> $GITHUB_OUTPUT
        fi

    - name: Display test results
      if: always()
      run: |
        echo "üìä Final Test Results:"
        echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
        echo "‚îÇ Total Tests: $TOTAL_TESTS"
        echo "‚îÇ Passing: $PASSING_TESTS"
        echo "‚îÇ Failing: $FAILING_TESTS"
        echo "‚îÇ Skipped: $SKIPPED_TESTS"
        echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"

      # Add step to get console errors count
    - name: Get console errors
      id: console-errors
      if: always()
      run: |
        if [ -f "cypress/reports/consoleErrors.json" ]; then
          TOTAL_ERRORS=$(jq -r '.totalErrors' cypress/reports/consoleErrors.json)
          echo "total=$TOTAL_ERRORS" >> "$GITHUB_OUTPUT"
          echo "Found $TOTAL_ERRORS console errors"
        else
          echo "total=0" >> "$GITHUB_OUTPUT"
          echo "No consoleErrors.json found"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-results-${{ github.run_id }}
        path: |
          cypress/reports/mochawesome-html/**
          cypress/reports/mochawesome/*.json
          cypress/screenshots/**/*.png
          cypress/videos/**/*.mp4
          cypress/fixtures/credits.json
          cypress/reports/consoleErrors.json
          cypress/reports/results.json
        if-no-files-found: warn
        retention-days: 14

    - name: Get credits data
      id: credits
      if: always()
      run: |
        if [ -f "cypress/fixtures/credits.json" ]; then
          # Format credits data with ResponseTime using jq
          CREDITS=$(jq -r 'map("\(.textModel), credits: \(.Credits), avgtime: \(.ResponseTime)") | join("\n")' cypress/fixtures/credits.json)
          # Escape newlines for GitHub Actions output
          CREDITS="${CREDITS//$'\n'/'\n'}"
          echo "credits=$CREDITS" >> $GITHUB_OUTPUT
          echo "Found credits data:"
          echo "$CREDITS" 
        else
          echo "No credits.json file found"
          echo "credits=No credits data available" >> $GITHUB_OUTPUT
        fi

    - name: Send Slack notification
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "username": "GitHub Actions",
            "icon_emoji": ":github:",
            "text": "*ü§ñ Cypress Test Results*\n\n*Environment:* ${{ env.CYPRESS_APP_URL || 'Staging' }}\n*Status:* ${{ steps.cypress.outcome }}\n\n*Test Summary*\n‚Ä¢ Total: ${{ steps.test-results.outputs.total || env.TOTAL_TESTS || 0 }}\n‚Ä¢ Passed: ${{ steps.test-results.outputs.passing || env.PASSING_TESTS || 0 }}\n‚Ä¢ Failed: ${{ steps.test-results.outputs.failing || env.FAILING_TESTS || 0 }}\n\n*Credit Usage & Response Time*\n${{ steps.credits.outputs.credits }}\n\n*Console Errors*\n‚Ä¢ Total: ${{ steps.console-errors.outputs.total }}\n\n*View Full Report:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click Here> üìä"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Check for slow responses in credits.json
      id: slow
      if: always()
      run: |
        SLOW=false
        if [ -f "cypress/fixtures/credits.json" ]; then
          # Extract and check if any ResponseTime > 10
          SLOW_COUNT=$(jq '[.[] | .ResponseTime | sub(" secs.";"") | tonumber | select(. > 10)] | length' cypress/fixtures/credits.json)
          if [ "$SLOW_COUNT" -gt 0 ]; then
            SLOW=true
            echo "There are $SLOW_COUNT slow responses (>10 sec) in credits.json"
          fi
        fi
        echo "slow=$SLOW" >> $GITHUB_OUTPUT

    - name: Send Slack notification for slow responses
      if: steps.slow.outputs.slow == 'true'
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "‚ö†Ô∏è One or more text model responses took more than 10 seconds! Please investigate.<#C08QZ42L9KM|b4m-automation-results>."
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_SLOW_RESPONSES}}

    - name: Check for high credit usage
      id: highcredits
      if: always()
      run: |
        if [ -f "cypress/fixtures/credits.json" ]; then
          HIGH=$(jq '[.[] | select(.Credits|tonumber >= 20)] | length' cypress/fixtures/credits.json)
          if [ "$HIGH" -gt 0 ]; then
            echo "high=true" >> $GITHUB_OUTPUT
            echo "$HIGH entries used 20 or more credits."
          else
            echo "high=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "high=false" >> $GITHUB_OUTPUT
        fi

    - name: Send Slack notification for high credit usage
      if: steps.highcredits.outputs.high == 'true'
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "‚ö†Ô∏è One or more requests used 20 or more credits! Please investigate in <#C08QZ42L9KM|b4m-automation-results>."
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_SLOW_RESPONSES }}


