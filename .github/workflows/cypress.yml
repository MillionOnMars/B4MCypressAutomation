name: Cypress Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
  schedule:
    - cron: '0 7,13,22 * * *'

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate required secrets
      run: |
        if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          echo "Error: SLACK_WEBHOOK_URL secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.CYPRESS_APP_URL }}" ]; then
          echo "Error: CYPRESS_APP_URL secret is not set"
          exit 1
        fi
        echo "✅ Required secrets are configured"

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Run Cypress tests
      id: cypress
      uses: cypress-io/github-action@v5
      with:
        browser: chrome
        config-file: cypress.config.js
        publish-summary: true
        reporter: mochawesome
        reporter-options: 'reportDir=cypress/reports,overwrite=false,html=false,json=true'
      env:
        CYPRESS_APP_URL: ${{ secrets.CYPRESS_APP_URL }}
      continue-on-error: true

    - name: Process test results
      if: always()
      run: |
        mkdir -p cypress/reports
        
        # Find the latest mochawesome report
        LATEST_REPORT=$(find cypress/reports -name 'mochawesome*.json' -type f -exec ls -t {} + | head -n 1)
        
        if [ -n "$LATEST_REPORT" ]; then
          echo "Processing report: $LATEST_REPORT"
          
          # Extract stats with proper path and null checking
          TOTAL=$(jq -r '.results[0].suites[0].tests | length // 0' "$LATEST_REPORT")
          PASSED=$(jq -r '[.results[0].suites[0].tests[] | select(.pass == true)] | length // 0' "$LATEST_REPORT")
          FAILED=$(jq -r '[.results[0].suites[0].tests[] | select(.fail == true)] | length // 0' "$LATEST_REPORT")
          
          echo "Stats found - Total: $TOTAL, Passed: $PASSED, Failed: $FAILED"
          
          # Save results
          jq -n \
            --arg total "$TOTAL" \
            --arg passed "$PASSED" \
            --arg failed "$FAILED" \
            '{totalTests: $total, totalPassed: $passed, totalFailed: $failed}' > cypress/reports/results.json
            
          echo "Results saved to results.json"
        else
          echo "Error: No mochawesome reports found!"
          echo "Available files in reports directory:"
          ls -la cypress/reports/
          exit 1
        fi

    - name: Get test results
      id: test-results
      if: always()
      run: |
        if [ -f "cypress/reports/results.json" ]; then
          echo "Reading results summary..."
          TOTAL=$(jq -r '.totalTests' cypress/reports/results.json)
          PASSED=$(jq -r '.totalPassed' cypress/reports/results.json)
          FAILED=$(jq -r '.totalFailed' cypress/reports/results.json)
          
          echo "total=$TOTAL" >> "$GITHUB_OUTPUT"
          echo "passed=$PASSED" >> "$GITHUB_OUTPUT"
          echo "failed=$FAILED" >> "$GITHUB_OUTPUT"
          
          echo "Test Results Summary:"
          echo "Total: $TOTAL"
          echo "Passed: $PASSED"
          echo "Failed: $FAILED"
        else
          echo "Error: results.json not found"
          exit 1
        fi

      # Add step to get console errors count
    - name: Get console errors
      id: console-errors
      if: always()
      run: |
        if [ -f "cypress/reports/consoleErrors.json" ]; then
          TOTAL_ERRORS=$(jq -r '.totalErrors' cypress/reports/consoleErrors.json)
          echo "total=$TOTAL_ERRORS" >> "$GITHUB_OUTPUT"
          echo "Found $TOTAL_ERRORS console errors"
        else
          echo "total=0" >> "$GITHUB_OUTPUT"
          echo "No consoleErrors.json found"
        fi

    # Add step to merge and generate HTML report
    - name: Generate HTML report
      if: always()
      run: |
        # Install required packages
        npm install -g mochawesome-merge mochawesome-report-generator
        
        # Ensure reports directory exists
        mkdir -p cypress/reports/mochawesome-html
        
        # Clean previous reports
        rm -rf cypress/reports/mochawesome-html/*
        
        # Debug: List all JSON files
        echo "Available JSON files:"
        find cypress/reports -name '*.json' -type f -ls
        
        # Only merge mochawesome JSON reports
        echo "Merging mochawesome JSON reports..."
        find cypress/reports -name 'mochawesome*.json' -type f > /tmp/report-list.txt
        if [ -s /tmp/report-list.txt ]; then
          mochawesome-merge $(cat /tmp/report-list.txt) > cypress/reports/mochawesome-html/mochawesome.json
          
          # Generate HTML with custom options
          echo "Generating HTML report..."
          marge cypress/reports/mochawesome-html/mochawesome.json \
            --reportDir cypress/reports/mochawesome-html \
            --reportTitle "Cypress Test Results" \
            --charts true \
            --code false \
            --reportPageTitle "B4M Test Report" \
            --inline true \
            --overwrite true
          
          # Verify report was created
          if [ -f "cypress/reports/mochawesome-html/mochawesome.html" ]; then
            echo "✅ HTML report generated successfully"
          else
            echo "❌ Failed to generate HTML report"
            exit 1
          fi
        else
          echo "No mochawesome JSON reports found"
          echo "Creating empty report..."
          echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0}}' > cypress/reports/mochawesome-html/mochawesome.json
          marge cypress/reports/mochawesome-html/mochawesome.json --reportDir cypress/reports/mochawesome-html
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-results-${{ github.run_id }}
        path: |
          cypress/reports/**/*.html
          cypress/reports/**/*.json
          cypress/reports/mochawesome-html/**
          cypress/screenshots/**/*.png
          cypress/videos/*.mp4
          cypress/fixtures/credits.json
          cypress/reports/consoleErrors.json
          cypress/reports/results.json
        if-no-files-found: warn
        retention-days: 14

    - name: Get credits data
      id: credits
      if: always()
      run: |
        if [ -f "cypress/fixtures/credits.json" ]; then
          # Format credits data using jq
          CREDITS=$(jq -r 'map("\(.textModel), credits: \(.Credits)") | join("\n")' cypress/fixtures/credits.json)
          # Escape newlines for GitHub Actions output
          CREDITS="${CREDITS//$'\n'/'\n'}"
          echo "credits=$CREDITS" >> $GITHUB_OUTPUT
          echo "Found credits data:"
          echo "$CREDITS"
        else
          echo "No credits.json file found"
          echo "credits=No credits data available" >> $GITHUB_OUTPUT
        fi

    - name: Send Slack notification
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "username": "GitHub Actions",
            "icon_emoji": ":github:",
            "text": "*🤖 Cypress Test Results*\n\n*Environment:* ${{ env.CYPRESS_APP_URL || 'Staging' }}\n*Status:* ${{ steps.cypress.outcome }}\n\n*Credits Usage*\n${{ steps.credits.outputs.credits }}\n\n*Console Errors*\n• Total: ${{ steps.console-errors.outputs.total }}\n\n*View Full Report:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click Here> 📊"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
